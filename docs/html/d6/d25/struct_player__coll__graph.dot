digraph "Player"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [shape=record,label="{Player\n|+ state\l+ username\l+ inputs\l|+ Player()\l+ Player()\l+ Player()\l+ Player()\l+ is_collidable()\l+ update_xaxis_position()\l+ update_zaxis_position()\l+ always_update()\l+ get_position_after\l_input()\l+ rotate_furniture()\l+ work_furniture()\l+ handle_in_game_grab\l_or_drop()\l+ handle_in_planning\l_grab_or_drop()\l+ grab_or_drop()\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [shape=record,label="{BasePlayer\n||+ add_static_components()\l+ BasePlayer()\l+ BasePlayer()\l+ BasePlayer()\l+ BasePlayer()\l+ base_speed()\l+ update_xaxis_position()\l+ update_zaxis_position()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d1/d73/struct_base_player.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node3 [shape=record,label="{Person\n|- character_models\l- model_index\l|+ Person()\l+ Person()\l+ Person()\l+ Person()\l+ update_xaxis_position()\l+ update_zaxis_position()\l+ update_model()\l+ base_speed()\l+ size()\l+ select_next_character\l_model()\l+ handle_collision()\l+ get_face_direction()\l+ update_facing_direction()\l+ always_update()\l# Person()\l- serialize()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$d3/de1/struct_person.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node4 [shape=record,label="{Entity\n|+ id\l+ componentSet\l+ componentArray\l+ pushed_force\l+ cleanup\l+ is_held\l|+ has()\l+ addComponent()\l+ get()\l+ add_static_components()\l+ Entity()\l+ Entity()\l+ Entity()\l+ Entity()\l+ ~Entity()\l+ announce()\l+ is_snappable()\l+ collides()\l+ update_position()\l+ raw_bounds()\l+ bounds()\l+ snap_position()\l+ rotate_facing_clockwise()\l+ tile_infront()\l+ add_to_navmesh()\l+ is_collidable()\l+ on_pickup()\l+ on_drop()\l+ render()\l+ update()\l+ tile_infront_given\l_pos()\l# Entity()\l# size()\l# render_debug_mode()\l# render_normal()\l# render_floating_name()\l# update_held_item_position()\l# get_heading()\l# turn_to_face_entity()\l# always_update()\l# planning_update()\l# in_round_update()\l# can_place_item_into()\l- serialize()\l}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$dc/dc4/struct_entity.html",tooltip=" "];
}
